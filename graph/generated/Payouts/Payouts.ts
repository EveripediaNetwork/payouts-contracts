// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressToPayersList extends ethereum.Event {
  get params(): AddressToPayersList__Params {
    return new AddressToPayersList__Params(this);
  }
}

export class AddressToPayersList__Params {
  _event: AddressToPayersList;

  constructor(event: AddressToPayersList) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _action(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenPayout extends ethereum.Event {
  get params(): TokenPayout__Params {
    return new TokenPayout__Params(this);
  }
}

export class TokenPayout__Params {
  _event: TokenPayout;

  constructor(event: TokenPayout) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _token(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Payouts extends ethereum.SmartContract {
  static bind(address: Address): Payouts {
    return new Payouts("Payouts", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  payerAddresses(param0: Address): boolean {
    let result = super.call(
      "payerAddresses",
      "payerAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_payerAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "payerAddresses",
      "payerAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAddressCall extends ethereum.Call {
  get inputs(): AddAddressCall__Inputs {
    return new AddAddressCall__Inputs(this);
  }

  get outputs(): AddAddressCall__Outputs {
    return new AddAddressCall__Outputs(this);
  }
}

export class AddAddressCall__Inputs {
  _call: AddAddressCall;

  constructor(call: AddAddressCall) {
    this._call = call;
  }

  get payer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAddressCall__Outputs {
  _call: AddAddressCall;

  constructor(call: AddAddressCall) {
    this._call = call;
  }
}

export class MultiplePayoutCall extends ethereum.Call {
  get inputs(): MultiplePayoutCall__Inputs {
    return new MultiplePayoutCall__Inputs(this);
  }

  get outputs(): MultiplePayoutCall__Outputs {
    return new MultiplePayoutCall__Outputs(this);
  }
}

export class MultiplePayoutCall__Inputs {
  _call: MultiplePayoutCall;

  constructor(call: MultiplePayoutCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receivers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MultiplePayoutCall__Outputs {
  _call: MultiplePayoutCall;

  constructor(call: MultiplePayoutCall) {
    this._call = call;
  }
}

export class RemoveAddressCall extends ethereum.Call {
  get inputs(): RemoveAddressCall__Inputs {
    return new RemoveAddressCall__Inputs(this);
  }

  get outputs(): RemoveAddressCall__Outputs {
    return new RemoveAddressCall__Outputs(this);
  }
}

export class RemoveAddressCall__Inputs {
  _call: RemoveAddressCall;

  constructor(call: RemoveAddressCall) {
    this._call = call;
  }

  get payer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAddressCall__Outputs {
  _call: RemoveAddressCall;

  constructor(call: RemoveAddressCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SinglePayoutCall extends ethereum.Call {
  get inputs(): SinglePayoutCall__Inputs {
    return new SinglePayoutCall__Inputs(this);
  }

  get outputs(): SinglePayoutCall__Outputs {
    return new SinglePayoutCall__Outputs(this);
  }
}

export class SinglePayoutCall__Inputs {
  _call: SinglePayoutCall;

  constructor(call: SinglePayoutCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SinglePayoutCall__Outputs {
  _call: SinglePayoutCall;

  constructor(call: SinglePayoutCall) {
    this._call = call;
  }
}
